{"version":3,"sources":["pages/NotFoundPage/NotFoundPage.js","components/Navigation/Navigation.js","components/AppBar/AppBar.js","App.js","index.js","routes.js"],"names":["NotFoundPage","Navigation","exact","to","routes","home","className","activeClassName","authors","books","AppBar","HomePage","lazy","AuthorsPage","BooksPage","BookDetailsPage","App","fallback","path","component","bookDetails","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAMeA,EAJM,WACnB,OAAO,uD,OC0CMC,EAvCI,WACjB,OACE,gCAME,cAAC,IAAD,CACEC,OAAK,EACLC,GAAIC,IAAOC,KACXC,UAAU,UACVC,gBAAgB,kBAJlB,kBAWA,cAAC,IAAD,CACEJ,GAAIC,IAAOI,QACXF,UAAU,UACVC,gBAAgB,kBAHlB,qBASA,cAAC,IAAD,CACEJ,GAAIC,IAAOK,MACXH,UAAU,UACVC,gBAAgB,kBAHlB,uBCtBSG,EARA,WACb,OACE,wBAAQJ,UAAU,SAAlB,SACE,cAAC,EAAD,OCuBAK,EAAWC,gBAAK,kBACpB,gCAGIC,EAAcD,gBAAK,kBACvB,sDAGIE,EAAYF,gBAAK,kBACrB,sDAEIG,EAAkBH,gBAAK,kBAC3B,sDA6CaI,E,4JAvCb,WACE,OACE,gCAGE,cAAC,EAAD,IAKA,cAAC,WAAD,CAAUC,SAAU,4CAApB,SACE,eAAC,IAAD,WAEE,cAAC,IAAD,CAAOf,OAAK,EAACgB,KAAMd,IAAOC,KAAMc,UAAWR,IAG3C,cAAC,IAAD,CAAOO,KAAMd,IAAOI,QAASW,UAAWN,IAGxC,cAAC,IAAD,CAAOX,OAAK,EAACgB,KAAMd,IAAOK,MAAOU,UAAWL,IAE5C,cAAC,IAAD,CAAOI,KAAMd,IAAOgB,YAAaD,UAAWJ,IAI5C,cAAC,IAAD,CAAOI,UAAWnB,gB,GA1BZqB,a,kBCpClBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,U,+BCbX,KAEbrB,KAAM,IACNG,QAAS,WACTC,MAAO,SACPW,YAAa,oB","file":"static/js/main.953ca469.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NotFoundPage = () => {\r\n  return <h1>404 - PAGE NOT FOUND</h1>;\r\n};\r\n\r\nexport default NotFoundPage;\r\n","import React from 'react';\r\n\r\nimport { NavLink } from 'react-router-dom'; //  Link - чтобы обернуть в ссылку, практически не используется. Используем NavLink - т.к. он позволяем использовать стилизацию в отличие от Link;\r\n\r\nimport routes from '../../routes'; // ссылки из routes.js - файла, в котором для удобства и чистоты кода храним все path из маршрутов (Route). Применяем их в NavLink и Route\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <nav>\r\n      {/*передаем NavLink с указанием пути to куда, необходимо перейти относительно корня. NavLink  допольнительно принимает несколько props cо стилями инлайново*/}\r\n\r\n      {/* Home Page */}\r\n\r\n      {/* добавляем только в NavLink у HOME --exact только на строгое равенство и соответствие указанному пути - чтобы постоянно не применялся стиль NavLink--active и стринца всегда подсвечивалась красным*/}\r\n      <NavLink\r\n        exact\r\n        to={routes.home}\r\n        className=\"NavLink\"\r\n        activeClassName=\"NavLink--active\"\r\n      >\r\n        HOME\r\n      </NavLink>\r\n\r\n      {/* Authors Page */}\r\n\r\n      <NavLink\r\n        to={routes.authors}\r\n        className=\"NavLink\"\r\n        activeClassName=\"NavLink--active\"\r\n      >\r\n        AUTHORS\r\n      </NavLink>\r\n\r\n      {/* Books Page */}\r\n      <NavLink\r\n        to={routes.books}\r\n        className=\"NavLink\"\r\n        activeClassName=\"NavLink--active\"\r\n      >\r\n        BOOKS\r\n      </NavLink>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\n\r\nimport Navigation from '../Navigation'; //  выносим всю Навигацию для удобства в отдельный компонент\r\n\r\nconst AppBar = () => {\r\n  return (\r\n    <header className=\"AppBar\">\r\n      <Navigation />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default AppBar;\r\n","import React, { Component, Suspense, lazy } from 'react'; //lazy - метод, который позволяет загрузить асинхронно, возвращает Promise, который возвращает default export, и webpack при сборке его разchankует. lazy работает только при активации Suspense, благодаря которому показывается fallback co спиннером, пока этот компонент грузится\n\nimport { Route, Switch } from 'react-router-dom'; // Route - чтобы создать маршрут;  Switch - чтобы рендерился один компонент из целой группы\n\nimport routes from './routes'; // ссылки из routes.js - файла, в котором для удобства и чистоты кода храним все path из маршрутов (Route). Применяем их в NavLink и Route\n\n// Pages\n// для тренировки занятия 7 МАРШРУТИЗИЦИЯ\n//отдельные страницы App\n\n// import HomePage from './pages/HomePage/HomePage';\n\n// import AuthorsPage from './pages/AuthorsPage';\n\n// import BooksPage from './pages/BooksPage';\n// import BookDetailsPage from './pages/BookDetailsPage'; //для отоброжения страницы об одной книге\n\nimport NotFoundPage from './pages/NotFoundPage';\n\n// Components\nimport AppBar from './components/AppBar';\n\n// Для тренировки занятия 6 РАБОТА С REST API\n// import Draft from './components/Draft'; // для тренировки теории модуля. Todolist\n\n// import Articles from './components/Articles'; //для тренировки api-подключения.\n\n// Styles\n\n// Dynamic import. Chunkование. При этом static import обязательно удалить, иначе React , как и прежде, будет включать его в результирующую сборку\nconst HomePage = lazy(() =>\n  import('./pages/HomePage' /* webpackChunkName: \"home-page\" */),\n); //lazy, передаю путь относительно текущего файла по отношению к этой странице. Добавляем комментарий, чтобы webpack при npm run build задал chunk имя, указанное в коментарии\n\nconst AuthorsPage = lazy(() =>\n  import('./pages/AuthorsPage' /* webpackChunkName: \"authors-page\" */),\n);\n\nconst BooksPage = lazy(() =>\n  import('./pages/BooksPage' /* webpackChunkName: \"books-page\" */),\n);\nconst BookDetailsPage = lazy(() =>\n  import(\n    './pages/BookDetailsPage' /* webpackChunkName: \"books-details-page\" */\n  ),\n);\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        {/* для тренировки занятия 7 МАРШРУТИЗИЦИЯ */}\n        {/* вставляем Component AppBar с ложенной в него Navigation */}\n        <AppBar />\n        {/* Чтобы создать маршрут (ROUTE) используем спец.компонент  ROUTE из пакета react-router-dom. В props ему передаем path - это путь с именем страницы приложения или /. А что именно рендерить передаем в component, в который передаем {ссылку на component} exact - указывает на то, что этот Route(маршрут или страница должен совпасть точно */}\n        {/*оборачиваем группу Route в Switch, который проходится по всей группе в порядке перечисления и ищет до 1-го совпадения. Как только найдено совпадения остальные Route он пропускает */}\n\n        {/* оборачиваем в контейнер для lazy компонентов - Suspense, кщторому в prop  нужно передать fallback - то, что будет отображаться пока код необходимого компонента загружается (спиннер fallback={<Spinner/>}>, заголовок)*/}\n        <Suspense fallback={<h3>Loading...</h3>}>\n          <Switch>\n            {/* HomePage */}\n            <Route exact path={routes.home} component={HomePage} />\n\n            {/* AuthorsPage */}\n            <Route path={routes.authors} component={AuthorsPage} />\n\n            {/* BooksPage */}\n            <Route exact path={routes.books} component={BooksPage} />\n            {/*для отоброжения страницы об одной книге  */}\n            <Route path={routes.bookDetails} component={BookDetailsPage} />\n\n            {/* NotFoundPage */}\n            {/* для обработки ошибок, если component not found, передаем какой-либо default Route. Если не передавать path, этот путь будет рендирится везде  и всегда*/}\n            <Route component={NotFoundPage} />\n          </Switch>\n        </Suspense>\n\n        {/* Для тренировки занятия 6 РАБОТА С REST API */}\n        {/* 1)  Articles */}\n        {/* <Articles /> */}\n        {/*2) TodoList для тренировки теории по модулю components//Draft/Draft.js */}\n        {/* <Draft /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\nimport './styles/base.scss';\n\nimport 'modern-normalize/modern-normalize.css'; //подключение стилей для normalize\n\nimport { BrowserRouter } from 'react-router-dom'; //оборачивает весь App в Browser Router - главный компонент, маршрутизатор, который под капотом реализовывает слежение за url-строкой (адресной строкой браузера) и при обнаружении изменений в ней, будет вносить изменения, указанніе разработчиком\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// routes.js - специальный файл, в котором мы будем хранить path из маршрутов (Route). До этого мы их напрямую прописывали в App.js\r\n// До <Route path=\"/authors\" component={AuthorsPage} />\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  //для NavLink и Route\r\n  home: '/',\r\n  authors: '/authors',\r\n  books: '/books',\r\n  bookDetails: '/books/:bookId',\r\n};\r\n"],"sourceRoot":""}