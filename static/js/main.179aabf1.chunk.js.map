{"version":3,"sources":["components/Draft/IconButton/IconButton.js","icons/delete.svg","components/Draft/TodoList/TodoList.js","components/Draft/TodoForm/TodoForm.js","components/Draft/TodoFilter/TodoFilter.js","components/Draft/Modal/Modal.js","api/todos-api.js","components/Draft/Draft.js","components/Articles/ArticlesSearchForm/ArticlesSearchForm.js","api/articles-api.js","components/Articles/Articles.js","App.js","index.js"],"names":["IconButton","children","onClick","allProps","type","className","defaultProps","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","d","fill","_ref3","SvgDelete","_ref","svgRef","title","titleId","props","xmlns","viewBox","ref","id","ForwardRef","TodoList","todos","onDeleteTodo","onToggleCompleted","map","text","completed","classNames","checked","onChange","aria-label","width","height","TodoForm","state","message","handleChange","event","setState","currentTarget","value","handleSubmit","preventDefault","onSubmit","Component","TodoFilter","modalRoot","document","querySelector","Modal","handleKeyDown","code","onClose","handleBackdropClick","window","addEventListener","removeEventListener","createPortal","axios","defaults","baseURL","get","then","response","data","todo","post","todoId","delete","update","patch","Draft","filter","showModal","addTodo","todosApi","deleteTodo","prevState","toggleCompleted","find","updatedTodo","changeFilter","getFilteredTodos","normalizedFilter","toLowerCase","includes","formSubmitHandler","console","log","toggleModal","catch","error","prevProps","localStorage","setItem","JSON","stringify","completedTodosCount","reduce","acc","filteredTodos","ArticlesSearchForm","query","headers","common","searchQuery","currentPage","pageSize","articles","Articles","isLoading","onChangeQuery","fetchArticles","options","articlesApi","finally","shouldRenderLoadMoreButton","article","href","url","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.179aabf1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './IconButton.css';\r\n\r\n// когда в кнопке отстутствует текст (в случае когда там иконка) обязательно  необходимо передавать атрибут доступности aria-label в propTypes и в самом компоненте IconButton и в App распыляем  {...allProps}, чтобы избежать ошибок при компиляции\r\nconst IconButton = ({ children, onClick, ...allProps }) => (\r\n  <button type=\"button\" className=\"IconButton\" onClick={onClick} {...allProps}>\r\n    {children}\r\n  </button>\r\n);\r\n\r\nIconButton.defaultProps = {\r\n  onClick: () => null,\r\n  children: null,\r\n};\r\n\r\nIconButton.propTypes = {\r\n  onClick: PropTypes.func,\r\n  children: PropTypes.node,\r\n\r\n  // когда в кнопке отстутствует текст (в случае когда там иконка) необходимо передавать атрибут доступности aria-label\r\n  'aria-label': PropTypes.string.isRequired,\r\n};\r\n\r\nexport default IconButton;\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M0 0h24v24H0z\",\n  fill: \"none\"\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n});\n\nfunction SvgDelete(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgDelete);\nexport default __webpack_public_path__ + \"static/media/delete.5575697b.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\r\n\r\nimport classNames from 'classnames'; //подключаем npm i classnames для удобства и  возможности объединения несколькиз class в одном свойстве\r\n\r\nimport IconButton from '../IconButton';\r\n\r\nimport { ReactComponent as DeleteIcon } from '../../../icons/delete.svg'; //import иконки для удаления\r\n\r\nimport './TodoList.css'; //import компонента кнопки\r\n\r\nconst TodoList = ({ todos, onDeleteTodo, onToggleCompleted }) => {\r\n  return (\r\n    <ul className=\"TodoList\">\r\n      {todos.map(({ id, text, completed }) => (\r\n        <li\r\n          key={id}\r\n          // в className подключаем несколько class с помощью import classNames from 'classnames'\r\n          className={classNames('TodoList__item', {\r\n            'TodoList__item--completed': completed,\r\n          })}\r\n        >\r\n          {/* вставляем checkbox */}\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"TodoList__checkbox\"\r\n            checked={completed}\r\n            onChange={() => onToggleCompleted(id)}\r\n          />\r\n\r\n          <p className=\"TodoList__text\">{text}</p>\r\n\r\n          {/* Вставка IconButton. // когда в кнопке отстутствует текст (в случае когда там иконка) необходимо передавать атрибут доступности aria-label и в самом компоненте IconButton распыляем props {...allProps} */}\r\n          <IconButton\r\n            onClick={() => {\r\n              onDeleteTodo(id);\r\n            }}\r\n            aria-label=\"Delete\"\r\n          >\r\n            {/* Вставка иконки для удаления delete.svg */}\r\n            <DeleteIcon width=\"25\" height=\"25\" fill=\"#fff\" />\r\n          </IconButton>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"TodoList__btn\"\r\n            onClick={() => {\r\n              onDeleteTodo(id);\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\nexport default TodoList;\r\n","import React, { Component } from 'react';\r\n\r\nimport './TodoForm.css';\r\n\r\nclass TodoForm extends Component {\r\n  state = {\r\n    message: '',\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ message: event.currentTarget.value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    // console.log(this.state);\r\n\r\n    // вызов addTodo из Draft.js <Form onSubmit={this.formSubmitHandler};\r\n    this.props.onSubmit(this.state.message);\r\n\r\n    // reset для очищения textarea\r\n    this.setState({ message: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"TodoEditor\" onSubmit={this.handleSubmit}>\r\n        <textarea\r\n          value={this.state.message}\r\n          onChange={this.handleChange}\r\n          className=\"TodoEditor__textarea\"\r\n        ></textarea>\r\n\r\n        <button type=\"submit\" className=\"TodoEditor__button\">\r\n          Add\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default TodoForm;\r\n","import React from 'react';\r\n\r\nimport './TodoFilter.css';\r\n\r\nconst TodoFilter = ({ value, onChange }) => (\r\n  <label className=\"Filter\">\r\n    Фильтр по имени\r\n    <input type=\"text\" value={value} onChange={onChange} />\r\n  </label>\r\n);\r\nexport default TodoFilter;\r\n","import React, { Component } from 'react';\r\n\r\nimport { createPortal } from 'react-dom'; //для создания портала, куда будем рендерить разметку компонента Modal\r\n\r\nimport './Modal.css';\r\n\r\n// для портала. ccылка к корневому элементу в index.html куда будем рендерить разметку компонента Modal.\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nclass Modal extends Component {\r\n  componentDidMount() {\r\n    // console.log('Modal componentDidMount');\r\n\r\n    //при 1 стадии монтирования вешаем слушателя события на window  для закрытия Модального окна по нажатию на ESC сперва\r\n    window.addEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  // на стадии размонтирования и зачистки кода после использования.\r\n  componentWillUnmount() {\r\n    // снимаем слушателя события с window при закрытии Модального окна по нажатию на ESC\r\n    window.removeEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  // закрытие Модального окна по нажатию на ESC\r\n  handleKeyDown = event => {\r\n    if (event.code === 'Escape') {\r\n      // console.log('ESC');\r\n\r\n      // в props прокидываем toggleModal для возможности закрыть модалку по нажатию на \"Escape\"\r\n      this.props.onClose();\r\n    }\r\n  };\r\n\r\n  // закрытие Модального окна по нажатию на backdrop. Чтобы модалка закрылась currentTarget и target должны быть ===\r\n  handleBackdropClick = event => {\r\n    if (event.currentTarget === event.target) {\r\n      this.props.onClose();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // возвращаем результат вызова import { createPortal } from 'react-dom'куда будем рендерить разметку компонента Modal и 1) первым параметром передаем разметку мадального окна; 2) ссылка на корневой элемент в index.html\r\n    return createPortal(\r\n      <div className=\"Modal__backdrop\" onClick={this.handleBackdropClick}>\r\n        <div className=\"Modal__content\">{this.props.children}</div>\r\n      </div>,\r\n      modalRoot,\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","// описание всей логики работы и подключения api\r\nimport axios from 'axios'; //для fetch запросов\r\n\r\n// baseURL\r\naxios.defaults.baseURL = `http://localhost:3000`;\r\n\r\n// забрать все todos. вызов в componentDidMount() в TodoList.js\r\n\r\nconst fetchTodos = () => {\r\n  return axios.get('/todos').then(response => response.data);\r\n};\r\n\r\n// add todo. для добавления todo\r\nconst addTodo = todo => {\r\n  return axios.post('/todos', todo).then(({ data }) => data);\r\n};\r\n\r\n// deleteTodo\r\nconst deleteTodo = todoId => {\r\n  return axios.delete(`todos/${todoId}`);\r\n};\r\n\r\n// для toggleCompleted прописывываем метод для обновления.  параметр update - {completed: !completed}\r\nconst updateTodo = (todoId, update) => {\r\n  return axios.patch(`/todos/${todoId}`, update).then(({ data }) => data);\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { fetchTodos, addTodo, deleteTodo, updateTodo };\r\n","import React, { Component } from 'react';\r\n\r\n// Components\r\nimport TodoList from './TodoList/TodoList';\r\nimport TodoForm from './TodoForm/TodoForm';\r\nimport TodoFilter from './TodoFilter/TodoFilter';\r\n\r\nimport './TodoList/TodoList.css'; //стили для TodoList\r\n\r\n// LOCAL STORAGE И ЖИЗНЕННЫЕ ЦИКЛЫ\r\nimport Modal from './Modal/Modal'; //Modal window\r\n\r\nimport todosApi from '../../api/todos-api'; //import файла, который прописывает логику настроек Api\r\n\r\nclass Draft extends Component {\r\n  // state for TodoList\r\n  state = {\r\n    todos: [],\r\n\r\n    // для фильтрации\r\n    filter: '',\r\n\r\n    // для Модального окна\r\n    showModal: false,\r\n  };\r\n\r\n  // ЖИЗНЕННЫЕ ЦИКЛЫ\r\n  // методы жизненного цикла вызываются без помощи стрелоных функции\r\n\r\n  // вызывается один раз при Mount компонета.\r\n  componentDidMount() {\r\n    // console.log('Mount component');\r\n\r\n    // При вызове делаем запрос с помощью axios и берем начальные данные, которые хранятся на локальном backend, который мы создали с помощью npm json-server и данные которого хранятся в корне проекта в файле db.json\r\n\r\n    // вызов функции из файла который прописывает логику настроек Api (todos-api.js)\r\n    todosApi\r\n      .fetchTodos()\r\n\r\n      .then(todos => this.setState({ todos }))\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  // вызывается после каждого обновления компонента\r\n  componentDidUpdate(prevProps, prevState) {\r\n    //обязательно сравниваем предыдущее значение todos c текущим, если неравно, то обновляем все todos. Это делается, чтобы не зациклить компонент\r\n\r\n    if (this.state.todos !== prevState.todos) {\r\n      // console.log('Update todos');\r\n\r\n      // при каждом обновлении todos массив todos, приводим к строке и полностью перезаписываем todos  в local Storage\r\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\r\n    }\r\n  }\r\n\r\n  // во время submit TodoForm нужно получить из нее данные, чтобы добавить  еще одну todos с ее текстом. Передаем этом метод с помощью prop для TodoForm\r\n  addTodo = text => {\r\n    // console.log(text);\r\n\r\n    // делаем todos, и добавляем ее в state\r\n    const todoData = {\r\n      // id: shortId.generate(), //ID не нужен, их сделает backend\r\n      text,\r\n      completed: false,\r\n    };\r\n\r\n    // перед добавлением сперва делаем запрос. в параметрах url,  и data, где указан шаблон ключей для отрисовки\r\n\r\n    // вызов функции из файла который прописывает логику настроек Api (todos-api.js)\r\n    todosApi.addTodo(todoData).then(todo => {\r\n      this.setState(({ todos }) => ({\r\n        todos: [...todos, todo],\r\n      }));\r\n    });\r\n\r\n    // before axios\r\n    // для обновления state, когда мы хотим в него что-либо добавить, сначала делаем новый массив, в который распыляем старый, и добавляем новый элемент в начало или конец массива [...старый[], элемент]\r\n    // this.setState(({ todos }) => ({\r\n    //   todos: [todo, ...todos],\r\n    // }));\r\n  };\r\n\r\n  // для удаления элемента в TodoList при onClick на кнопку. Обращаемся к id элемента.\r\n  deleteTodo = todoId => {\r\n    todosApi.deleteTodo(todoId).then(() => {\r\n      this.setState(prevState => ({\r\n        todos: prevState.todos.filter(todo => todo.id !== todoId), //берем предыдущий todos и отфильтровываем все элементы, кроме того у которого id совпадает\r\n      }));\r\n    });\r\n\r\n    // before axios\r\n    // this.setState(prevState => ({\r\n    //   todos: prevState.todos.filter(todo => todo.id !== todoId), //берем предыдущий todos и отфильтровываем все элементы, кроме того у которого id совпадает\r\n    // }));\r\n  };\r\n\r\n  //checkbox когда хотим что-либо обновить в коллекции, не изменяя ее длины. Сравниваем по идентификаторам, если совпало - заменяем, если нет - возвращается то, что было\r\n  toggleCompleted = todoId => {\r\n    //   console.log(todoId);\r\n\r\n    // находим id того элемента на котором кликнули и вытягиваем его ключ completed\r\n    const todo = this.state.todos.find(({ id }) => id === todoId);\r\n    const { completed } = todo;\r\n    const update = { completed: !completed };\r\n\r\n    // делаем запрос, в парметрах указываем url и в каком поле какое значение мы хотим изменить, изменяем ключ completed на противоположное\r\n    todosApi.updateTodo(todoId, update).then(updatedTodo => {\r\n      this.setState(({ todos }) => ({\r\n        todos: todos.map(todo =>\r\n          todo.id === updatedTodo.id ? updatedTodo : todo,\r\n        ),\r\n      }));\r\n    });\r\n\r\n    // before axios\r\n    // this.setState(({ todos }) => ({\r\n    //   todos: todos.map(todo =>\r\n    //     todo.id === todoId ? { ...todo, completed: !todo.completed } : todo,\r\n    //   ),\r\n    // }));\r\n  };\r\n\r\n  // для фильтрации. для передачи данныx при onChange\r\n  changeFilter = event => {\r\n    this.setState({\r\n      filter: event.currentTarget.value,\r\n    });\r\n  };\r\n\r\n  // вычисляемые свойства для фильтрации. Отфильтровываем те todos, которые includes то, что мы записали в input Фильтр по имени и в TodoList рендерим не все <TodoList\r\n  //   todos={todos}, а только отфильтрованые, т.е.  todos={filteredTodos}\r\n  // />\r\n  getFilteredTodos = () => {\r\n    // для чистоты кода выведем this.state.filter.toLowerCase() в отдельную переменную\r\n    const normalizedFilter = this.state.filter.toLowerCase();\r\n\r\n    return this.state.todos.filter(todo =>\r\n      todo.text.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  };\r\n\r\n  // чтобы при отравке (submit) формы получить доступ к state из Form.js. Это можно сделать через props. В data прокидываются ключи name,tag из state\r\n  formSubmitHandler = data => {\r\n    console.log(data);\r\n  };\r\n\r\n  // работа Модального окна. Открытие-закрытие в зависимости от предыдущего значения\r\n  toggleModal = () => {\r\n    this.setState(({ showModal }) => ({\r\n      showModal: !showModal,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    // деструктуризируем todos\r\n    const { todos } = this.state;\r\n\r\n    //для рассчета Количество выполненных todos\r\n    const completedTodosCount = todos.reduce(\r\n      (acc, todo) => (todo.completed ? acc + 1 : acc),\r\n      0,\r\n    );\r\n\r\n    const filteredTodos = this.getFilteredTodos();\r\n\r\n    return (\r\n      <div>\r\n        {/* Form for TodoList */}\r\n        <TodoForm onSubmit={this.addTodo} />\r\n        {/* для фильтрации */}\r\n        <TodoFilter value={this.state.filter} onChange={this.changeFilter} />\r\n\r\n        {/* TodoList */}\r\n        <div className=\"TodoList\">\r\n          <h2>TodoList</h2>\r\n          <p>Total todos: {todos.length}</p>\r\n          <p>Количество выполненных: {completedTodosCount}</p>\r\n        </div>\r\n        <TodoList\r\n          todos={filteredTodos}\r\n          onDeleteTodo={this.deleteTodo}\r\n          onToggleCompleted={this.toggleCompleted}\r\n        />\r\n\r\n        {/* LOCAL STORAGE И ЖИЗНЕННЫЕ ЦИКЛЫ */}\r\n        {/* Modal. Рендер по условию */}\r\n        <button type=\"button\" className=\"ModalBtn\" onClick={this.toggleModal}>\r\n          Open modal window\r\n        </button>\r\n\r\n        {this.state.showModal && (\r\n          //в props прокидываем toggleModal для возможности закрыть модалку по нажатию на \"Escape\"\r\n          <Modal onClose={this.toggleModal}>\r\n            <h1>Modal</h1>\r\n            <button type=\"button\" onClick={this.toggleModal}>\r\n              Close Modal window\r\n            </button>\r\n          </Modal>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Draft;\r\n","import React, { Component } from 'react';\r\n\r\nimport './ArticlesSearchForm.css';\r\n\r\nclass ArticlesSearchForm extends Component {\r\n  state = {\r\n    query: '',\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      query: event.currentTarget.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    // console.log(this.state);\r\n\r\n    //  передача  props onSubmit из Articles.js для обработки действий когда будет изменяться query\r\n    this.props.onSubmit(this.state.query);\r\n\r\n    //   обновление input\r\n    this.setState({\r\n      query: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className=\"Articles__search__form\">\r\n        <label>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.query}\r\n            onChange={this.handleChange}\r\n          />\r\n          <button type=\"submit\">Search</button>\r\n        </label>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ArticlesSearchForm;\r\n","import axios from 'axios'; //для fetch запросов\r\n\r\n// из api-документации используем общий заголовок авторизации, чтобы сократить код, поєтому прописываем apiKey по default\r\naxios.defaults.headers.common['Authorization'] =\r\n  'Bearer 4330ebfabc654a6992c2aa792f3173a3';\r\n\r\nconst fetchArticles = ({ searchQuery = '', currentPage = 1, pageSize = 5 }) => {\r\n  return axios\r\n    .get(\r\n      `https://newsapi.org/v2/everything?q=${searchQuery}&pageSize=${pageSize}&page=${currentPage}`,\r\n    )\r\n    .then(response => response.data.articles);\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { fetchArticles };\r\n","import React, { Component } from 'react';\r\n\r\n// Components\r\nimport ArticlesSearchForm from './ArticlesSearchForm/ArticlesSearchForm'; //input для поиска\r\n\r\nimport articlesApi from '../../api/articles-api'; //import файла, который прописывает логику настроек Api\r\n\r\nimport './Articles.css';\r\n\r\nclass Articles extends Component {\r\n  state = {\r\n    articles: [],\r\n    currentPage: 1, //чтобы при нажатии на Load more могли увеличивать currentPage, и отрисовать следующую часть запроса\r\n    searchQuery: '', //чтобы между разными запросами могли сохранить query, по которому делаем запрос и он же отрисовывался дальше при нажатии на  Load more\r\n    isLoading: false, //спиннер, состояние загрузки\r\n\r\n    error: null, //для catch\r\n  };\r\n\r\n  // ЖИЗНЕННЫЕ ЦИКЛЫ\r\n  componentDidUpdate(prevProps, prevState) {\r\n    //  добавляем условие, что если компонент обновился и обновилось именно свойство searchQuery ({ searchQuery: query }) тогда в этом случае делаем http-запрос. (если этого не сделать http-запрос делается с пустой сторокой (searchQuery: '') и не возвращает результат)\r\n    if (prevState.searchQuery !== this.state.searchQuery) {\r\n      this.fetchArticles();\r\n    }\r\n  }\r\n  // Методы\r\n  // метод, который будет отрабатываться при submit формы, когда будет изменяться query\r\n  onChangeQuery = query => {\r\n    // console.log(query);\r\n\r\n    // 1)  чтобы при нажатии на  Load more продолжался делаться запрос по предыдущему query\r\n    // 2)  чтобы изменить термин поиска, когда при вводе нового query в input - currentPage снова начинал отрисовываться с 1-й страницы, а не продалжал увеличиваться +1\r\n    //   3) articles при новом запросе перед начало обнулялся от предыдущих статей\r\n    //   4) при каждом следующем запросе обнуляем error\r\n    this.setState({\r\n      searchQuery: query,\r\n      currentPage: 1,\r\n      articles: [],\r\n      error: null,\r\n    });\r\n\r\n    //   вызов  fetchArticles для обработки   того  query, который пользователь ввел в input, делаем http-запрос в componentDidUpdate\r\n  };\r\n\r\n  //выносим http-запрос в отдельный метод для удобства переиспользования\r\n  fetchArticles = () => {\r\n    const { searchQuery, currentPage } = this.state;\r\n\r\n    //   выводим в отдельную переменную  searchQuery, currentPage для того, чтобы передать options в props в articles-api.js;\r\n    const options = { searchQuery, currentPage };\r\n\r\n    //   сотояние загрузки, меняем значение\r\n    this.setState({ isLoading: true });\r\n\r\n    //   по результатам того  query, который пользователь ввел в input делаем http-запрос\r\n\r\n    // вызов функции из файла который прописывает логику настроек Api (articles-api.js)\r\n    articlesApi\r\n      .fetchArticles(options)\r\n      .then(articles => {\r\n        // console.log(response.data.articles);\r\n\r\n        this.setState(prevState => ({\r\n          //   чтобы articles не записывались поверх друг друга, а добавлялись в массив, добавляем новые через ...rest\r\n          articles: [...prevState.articles, ...articles],\r\n\r\n          // при нажатии на Load more увеличиваем currentPage, отрисовываем следующую часть запроса\r\n          currentPage: prevState.currentPage + 1,\r\n        }));\r\n        // убираем отображение спиннера, когда загрузились данные\r\n      })\r\n      .catch(error => this.setState({ error }))\r\n      .finally(() => this.setState({ isLoading: false }));\r\n  };\r\n\r\n  render() {\r\n    const { articles, isLoading, error } = this.state;\r\n\r\n    //   должен ли отображаться Load more и спиннер. Отображается, если есть articles и вернулся http-запрос\r\n    const shouldRenderLoadMoreButton = articles.length > 0 && !isLoading;\r\n\r\n    return (\r\n      <div className=\"Articles\">\r\n        <h1 className=\"Articles__title\">Articles</h1>\r\n        {/* input для поиска. В props передаем метод, который будет отрабатываться при submit формы */}\r\n        <ArticlesSearchForm onSubmit={this.onChangeQuery} />\r\n        <ul>\r\n          {articles.map(article => (\r\n            <li key={article.title}>\r\n              <a href={article.url}>{article.title}</a>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n\r\n        {/* появление спиннера, рендерим по условию  */}\r\n        {isLoading && <h2>Loading...</h2>}\r\n\r\n        {/* button Load more. Рендер по условию и спиннер во время загрузки меняем надпись Load more на Loading...*/}\r\n        {shouldRenderLoadMoreButton && (\r\n          <button\r\n            type=\"button\"\r\n            className=\"LoadMoreBtn\"\r\n            onClick={this.fetchArticles}\r\n          >\r\n            Load more\r\n          </button>\r\n        )}\r\n\r\n        {/* для обработки ошибок (error), рендер по условию */}\r\n        {error && <h2>Something get wrong! Please, try again!</h2>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Articles;\r\n","import React, { Component } from 'react';\n\n// Components\n\nimport Draft from './components/Draft'; // для тренировки теории модуля. Todolist\n\nimport Articles from './components/Articles'; //для тренировки api-подключения.\n\n// Styles\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        {/* Articles */}\n        <Articles />\n\n        {/*TodoList для тренировки теории по модулю components//Draft/Draft.js */}\n        <Draft />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\n\nimport 'modern-normalize/modern-normalize.css'; //подключение стилей для normalize\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}