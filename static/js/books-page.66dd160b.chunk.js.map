{"version":3,"sources":["components/BookPreview/BookPreview.js","components/BookList/BookList.js","pages/BooksPage/BooksPage.js"],"names":["BookPreview","imgUrl","title","className","src","alt","withRouter","books","location","map","id","to","pathname","state","from","BooksPage","a","axios","get","response","this","setState","data","BookList","Component"],"mappings":"qQAiBeA,EAbK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAC7B,OACE,gCACE,qBAAKC,UAAU,oBAAf,SACE,qBAAKC,IAAKH,EAAQI,IAAKH,MAEzB,8BACE,6BAAKA,UCwBEI,G,MAAAA,aA3BE,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACzB,OACE,mCAGE,oBAAIL,UAAU,WAAd,SACGI,EAAME,KAAI,gBAAGC,EAAH,EAAGA,GAAIT,EAAP,EAAOA,OAAQC,EAAf,EAAeA,MAAf,OACT,6BAEE,cAAC,IAAD,CACES,GAAI,CACFC,SAAS,UAAD,OAAYF,GAGpBG,MAAO,CAAEC,KAAMN,IALnB,SAQE,cAAC,EAAD,CAAaP,OAAQA,EAAQC,MAAOA,OAV/BQ,e,mLCiBJK,E,4MAtBbF,MAAQ,CACNN,MAAO,I,8FAKT,4BAAAS,EAAA,sEACyBC,IAAMC,IAAI,+BADnC,OACQC,EADR,OAIEC,KAAKC,SAAS,CAAEd,MAAOY,EAASG,OAJlC,gD,0EAOA,WACE,OACE,qBAAKnB,UAAU,kBAAf,SACE,cAACoB,EAAA,EAAD,CAAUhB,MAAOa,KAAKP,MAAMN,c,GAjBZiB","file":"static/js/books-page.66dd160b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './BookPreview.scss';\r\n\r\nconst BookPreview = ({ imgUrl, title }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"BookPreview-thumb\">\r\n        <img src={imgUrl} alt={title} />\r\n      </div>\r\n      <div>\r\n        <h5>{title}</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookPreview;\r\n","import React from 'react';\r\n\r\nimport { Link, withRouter } from 'react-router-dom'; //Link - Для того чтобы при клике на книгу перенаправляло на новую страницу с информацией именно о ней; withRouter - компонент высшего порядка (грубо говор - это как композиция функций), который может оборачивать исходный компонент, и возвращать другой компонент. Если необходимо в каком-либо компоненте, который не рендерится Route, получить доступ к 3 props (match, history, location)\r\n\r\nimport BookPreview from '../BookPreview';\r\n\r\nimport './BookList.scss';\r\n\r\nconst BookList = ({ books, location }) => {\r\n  return (\r\n    <>\r\n      {/* <h1>This is BOOKS PAGE</h1> */}\r\n\r\n      <ul className=\"BookList\">\r\n        {books.map(({ id, imgUrl, title }) => (\r\n          <li key={id}>\r\n            {/* Для того чтобы при клике на книгу перенаправляло на новую страницу с информацией именно о ней. Создаем еще один Link с путем, в котором указываем одно из свойств props->match->url (это свойство показывает буквально то, что находится в адресной строке. И его удобно использовать для создания вложенных маршрутов. Хранит информацию как текущий Route совпал с pathname) и id*/}\r\n            <Link\r\n              to={{\r\n                pathname: `/books/${id}`,\r\n\r\n                // в state можно передавать информацию, откуда ты пришел на эту страницу\r\n                state: { from: location },\r\n              }}\r\n            >\r\n              <BookPreview imgUrl={imgUrl} title={title} />\r\n            </Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\n// вызваем функцию withRouter(), где в параметр передаем ссылку на BookList\r\nexport default withRouter(BookList);\r\n","// отрисовывает все books из db.json\r\n\r\nimport React, { Component } from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\n// Components\r\nimport BookList from '../../components/BookList';\r\n\r\nclass BooksPage extends Component {\r\n  state = {\r\n    books: [],\r\n  };\r\n\r\n  // ЖИЗНЕННЫЕ ЦИКЛЫ\r\n  // при Mount компонента отрисовываются все книги при переходе на страницу BOOKS с помощью async await\r\n  async componentDidMount() {\r\n    const response = await axios.get('http://localhost:3000/books');\r\n    // console.log(response.data);\r\n\r\n    this.setState({ books: response.data });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <BookList books={this.state.books} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BooksPage;\r\n"],"sourceRoot":""}